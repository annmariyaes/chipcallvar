params {
    FASTQC_CONTAINER    = "/scratch/containers/depot.galaxyproject.org-singularity-fastqc-0.11.9--0.img"
    BWAMEM2_CONTAINER   = "/scratch/containers/community.wave.seqera.io-library-bwa-mem2-2.2.1--e269358148d98816.img"
    BEDTOOLS_CONTAINER  = "/scratch/containers/depot.galaxyproject.org-singularity-bedtools-2.31.1--hf5e1c6e_0.img"
    SAMTOOLS_CONTAINER  = "/scratch/containers/depot.galaxyproject.org-singularity-samtools-1.20--h50ea8bc_0.img"
    MOSDEPTH_CONTAINER  = "/scratch/containers/depot.galaxyproject.org-singularity-mosdepth-0.3.8--hd299d5a_0.img"    
    MACS3_CONTAINER     = "/scratch/containers/macs3_3.0.3--6f361de9831a5246.sif"
    VEP_CONTAINER       = "/scratch/containers/ensembl-vep_113.3--8bf638f699fb023e.sif"
    BCFTOOLS_CONTAINER  = "/scratch/containers/depot.galaxyproject.org-singularity-bcftools-1.20--h8b25389_0.img"
    HTSLIB_CONTAINER    = "/scratch/containers/depot.galaxyproject.org-singularity-htslib-1.20--h5efdd21_2.img"
    MULTIQC_CONTAINER   = "/scratch/containers/depot.galaxyproject.org-singularity-multiqc-1.25.1--pyhdfd78af_0.img"
    GATK_CONTAINER      = "/scratch/containers/depot.galaxyproject.org-singularity-gatk4-4.5.0.0--py36hdfd78af_0.img"
    FREEBAYES_CONTAINER = "/scratch/containers/depot.galaxyproject.org-singularity-freebayes-1.3.6--hbfe0e7f_2.img"    
    VCF2MAF_CONTAINER   = "/scratch/containers/vcf2maf_1.6.22--478125c4e2c927b2.sif"
    R_CONTAINER         = "/scratch/containers/chipcallvar-r.sif"

    WINDOW_SIZE = 1000000    
    VEP_CACHE   = "/storage/home/seb01ann/.vep"
    VEP_PATH    = "/storage/tools/ensembl-vep_113.3/ensembl-vep"
    VEP_SPECIES = "homo_sapiens"
    VEP_VERSION = 113
    
    // preprocessing (base quality recalibration)
    // known germline polymorphisms
    DBSNP     = '/storage/projects/P024_ChIPseq_AE/chipcallvar/reference/Homo_sapiens_assembly38.dbsnp138.vcf.gz'
    DBSNP_TBI = '/storage/projects/P024_ChIPseq_AE/chipcallvar/reference/Homo_sapiens_assembly38.dbsnp138.vcf.gz.tbi'
    // high-confidence InDels
    MILLS_1000G     = '/storage/projects/P024_ChIPseq_AE/chipcallvar/reference/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz'
    MILLS_1000G_TBI = '/storage/projects/P024_ChIPseq_AE/chipcallvar/reference/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz.tbi'
    
    // for mutect2   
    PON     = '/storage/projects/P024_ChIPseq_AE/chipcallvar/reference/1000g_pon.hg38.vcf.gz'
    PON_TBI = '/storage/projects/P024_ChIPseq_AE/chipcallvar/reference/1000g_pon.hg38.vcf.gz.tbi'
    GNOMAD     = '/storage/projects/P024_ChIPseq_AE/chipcallvar/reference/af-only-gnomad.hg38.vcf.gz'
    GNOMAD_TBI = '/storage/projects/P024_ChIPseq_AE/chipcallvar/reference/af-only-gnomad.hg38.vcf.gz.tbi'

    INTERVALS = '/storage/projects/P024_ChIPseq_AE/beds/all_H3K27Ac_peaks.bed'    
    genome           = null
    GENOME_DEFAULT   = '/storage/projects/P024_ChIPseq_AE/chipcallvar/reference/resources-broad-hg38-v0-Homo_sapiens_assembly38.fasta'
    REFERENCE_GENOME = params.genome ? params.genome : params.GENOME_DEFAULT 

    assembly         = null    
    ASSEMBLY_DEFAULT = 'GRCh38'
    ASSEMBLY         = params.assembly ? params.assembly : params.ASSEMBLY_DEFAULT
    
    fai         = null
    FAI_DEFAULT = '/storage/projects/P024_ChIPseq_AE/chipcallvar/reference/resources-broad-hg38-v0-Homo_sapiens_assembly38.fasta.fai'
    GENOME_FAI  = params.fai ? params.fai : params.FAI_DEFAULT
    
    // by default
    TOOLS  = 'macs3' 
    STEP   = 'mapping'
    skip_tools = null

    // variant filtering
    depth = vaf = af1 = af2 = 0
    DP = params.depth ?: 10
    VAF = params.vaf ?: 0.1
    AF = params.af1 ?: 0.0001
    gnomADe_AF = params.af2 ?: 0.0001    
}  
                                                                                                                 

manifest {
    name = 'nfcore/chipcallvar'
    author = 'Ann'
    description = 'ChIP-seq variant calling pipeline'
    version = '1.0.0'
}


process {
    executor = 'slurm'
    maxRetries = 3
    memory = { task.exitStatus == 137 ? task.memory * 1.5 : task.memory }
    errorStrategy = { task.exitStatus in [137,140,143,255] ? 'retry' : 'finish' }
    beforeScript = 'export PATH=/storage/tools/bwa-mem2:$PATH'
   
    // Default settings for all processes
    cpus = 8
    memory = '100.GB'
    time = '120.h'

    
    withLabel: 'process_medium' {
        cpus = 16
    }

    withLabel: 'process_high' {
        cpus = 24
    }

     withLabel: 'process_RScript' {
        conda = 'environment.yml'
    }

    withName: 'FASTQC' {
        time = { 24.h * task.attempt }
        clusterOptions = {
            "--job-name=fastqc_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/fastqc_%j.out" +
            " --error=${params.OUTDIR}/logs/fastqc_%j.err"
        }
    }
    
    withName: 'BWAMEM2_INDEX' {
        time = { 24.h * task.attempt }
        clusterOptions = {
            "--job-name=bwamem2_index_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +            
            " --output=${params.OUTDIR}/logs/bwamem2_index_%j.out" +
            " --error=${params.OUTDIR}/logs/bwamem2_index_%j.err"
        }
    }    
    
    withName: 'BWAMEM2_MEM' {
        time = { 24.h * task.attempt }
        clusterOptions = {
            "--job-name=bwamem2_mem_${task.index}" +
            " --output=${params.OUTDIR}/logs/bwamem2_mem_%j.out" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --error=${params.OUTDIR}/logs/bwamem2_mem_%j.err"
        }
    }

    withName: 'SAMTOOLS_MAP' {
        time = { 24.h * task.attempt }
        clusterOptions = {
            "--job-name=samtools_map_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/samtools_merge_%j.out" +
            " --error=${params.OUTDIR}/logs/samtools_merge_%j.err"
        }
    }
   
   withName: 'SAMTOOLS_MERGE' {
        time = { 24.h * task.attempt }
        clusterOptions = {
            "--job-name=samtools_merge_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/samtools_merge_%j.out" +
            " --error=${params.OUTDIR}/logs/samtools_merge_%j.err"
        }
    }

    withName: 'MACS3_CALLPEAK' {
        time = { 24.h * task.attempt }
        clusterOptions = { 
            "--job-name=macs3_peak_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/macs3_peak_%j.out" +
            " --error=${params.OUTDIR}/logs/macs3_peak_%j.err"
        }
    }
    
    withName: 'MACS3_CALLVAR_CHR' {
        time = { 72.h * task.attempt }
        clusterOptions = {
            "--job-name=macs3_var_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/macs3_var_%j.out" +
            " --error=${params.OUTDIR}/logs/macs3_var_%j.err"
        }
    }

    withName: 'GATK_MUTECT2' {
        time = { 24.h * task.attempt }
        clusterOptions = {
            "--job-name=mutect2_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/mutect2_%j.out" +
            " --error=${params.OUTDIR}/logs/mutect2_%j.err"
        }
    }

    withName: 'FREEBAYES' {
        time = { 24.h * task.attempt }
        clusterOptions = {
            "--job-name=freebayes_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/freebayes_%j.out" +
            " --error=${params.OUTDIR}/logs/freebayes_%j.err"
        }
    }
    
    withName: 'ENSEMBL_VEP' {
        time = { 24.h * task.attempt }
        containerOptions = '-B /storage/home/seb01ann/.vep:/storage/home/seb01ann/.vep'
        clusterOptions = {
            "--job-name=vep_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/vep_%j.out" +
            " --error=${params.OUTDIR}/logs/vep_%j.err"
        }
    }
    
    withName: 'BCFTOOLS_REHEADER' {
        time = { 24.h * task.attempt }
        clusterOptions = {
            "--job-name=bcftools_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/bcftools_%j.out" +
            " --error=${params.OUTDIR}/logs/bcftools_%j.err"
        }
    }
    
    withName: 'VCF2MAF' {
        time = { 24.h * task.attempt }
        clusterOptions = {
            "--job-name=vcf2maf_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/vcf2maf_%j.out" +
            " --error=${params.OUTDIR}/logs/vcf2maf_%j.err"
        }
    }
    
    withName: 'MAFTOOLS' {
        time = { 24.h * task.attempt }
        clusterOptions = {
            "--job-name=maftools_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/maftools_%j.out" +
            " --error=${params.OUTDIR}/logs/maftools_%j.err"
        }
    }
     
    withName: 'MULTIQC' {
        time = { 24.h * task.attempt }
        clusterOptions = {
            "--job-name=multiqc_${task.index}" +
            " --nodelist=rbctsrv02" +
            " --partition=LocalQ" +
            " --output=${params.OUTDIR}/logs/multiqc_%j.out" +
            " --error=${params.OUTDIR}/logs/multiqc_%j.err"
        }
    }
}


executor {
    name = 'slurm'
    queueSize = 10  // Limit concurrent jobs
    submitRateLimit = '20/1min'  // Limit job submission rate
}


singularity {
    enabled = true
    autoMounts = true
    cacheDir = '/scratch/containers'
    runOptions = '-B /scratch/cache/tmp --env TMPDIR=/scratch/cache/tmp'
}

conda {
    enabled = true
    cacheDir = '/storage/home/seb01ann/.conda/pkgs'
}

cache {
    enabled = true
    path = "${params.OUTDIR}/work_cache"
}

report {
    enabled = true
    overwrite = true
    file = "${params.OUTDIR}/execution.report.html"
}

trace {
    enabled = true
    overwrite = true
    file = "${params.OUTDIR}/pipeline.trace.txt"
}

def logDir = new File("${params.OUTDIR}/logs")
if (!logDir.exists()) {
    logDir.mkdirs()
}
